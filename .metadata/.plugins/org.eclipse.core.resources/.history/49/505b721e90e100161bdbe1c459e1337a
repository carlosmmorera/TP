package tp.pr3.ProgramCompiler.instruction;

import tp.pr3.ByteCode.*;
import tp.pr3.bytecode.ByteCode;
import tp.pr3.bytecode.Store;
import tp.pr3.bytecode.arithmetics.*;
import tp.pr3.exception.*;
import tp.pr3.programcompiler.LexicalParser;
import tp.pr3.programcompiler.term.*;
/**
 * Clase que gestiona la instrucción CompoundAssignment.
 * @author Carlos Moreno
 * @author Manuel Suárez
 * @version 15/01/2017
 */
public class CompoundAssignment implements Instruction{
	private String var_name;
	private String operator;
	private Term term1;
	private Term term2;
	
	final int NUMCOMPONENTES = 5;
	/**
	 * Constructores de la clase.
	 */
	public CompoundAssignment(){
		this.var_name = "";
		this.operator = "";
	}
	public CompoundAssignment(String varName, String op, Term t1, Term t2){
		this.var_name = varName;
		this.operator = op;
		this.term1 = t1;
		this.term2 = t2;
	}
	/**
	 * Método que parsea la instrucción.
	 * @param words: instrucción introducida en el programa.
	 * @param lexparser encargada del análisis léxico.
	 * @return Instruction dependiendo de si coincide con la instrucción de esta clase.
	 */
	public Instruction lexParse(String[] words, LexicalParser lexparser){
		if (words.length != NUMCOMPONENTES || !words[1].equals("=") || 
				words[0].length() != 1 || !IsAnOperator(words[3])) return null;
		
		char var = words[0].charAt(0);
		if (var < 'a' || var > 'z') return null;

		Term t1 = TermParser.parse(words[2]);
		Term t2 = TermParser.parse(words[4]);
		
		if (t1 == null || t2 == null) return null;

		lexparser.increaseProgramCounter();
		return new CompoundAssignment(words[0], words[3], t1, t2);
	}
	/**
	 * Método que comprueba si el String es un operador válido.
	 * @param op: String introducido.
	 * @return boolean dependiendo de si el operador coincide con alguno de 
	 * los operadores aritméticos existentes.
	 */
	private boolean IsAnOperator(String op){
		if (op.length() != 1) return false;
		else return (op.equals("+") || op.equals("-") || op.equals("*")
				|| op.equals("/"));
	}
	/**
	 * Método que compila la instrucción.
	 * @param compiler
	 * @throws ArrayException
	 * @throws NonexistentVariable
	 * @throws VariableTableOverflow 
	 */
	public void compile(tp.pr3.programcompiler.programcompiler.Compiler compiler)
			throws ArrayException, NonexistentVariable, VariableTableOverflow {
		
		compiler.addByteCode(this.term1.compile(compiler));
		compiler.addByteCode(this.term2.compile(compiler));
		compiler.addByteCode(this.generateBCArithmeticOper());
		int index = 0;
		try{
			index = compiler.getIndex(this.var_name);
		}
		catch(NonexistentVariable e){
			index = compiler.addVar(this.var_name);
		}
		finally{
			ByteCode bc = new Store(index);
			compiler.addByteCode(bc);
		}
	}
	/**
	 * Método que genera el ByteCode correspondiente al operador de la Instrucción.
	 * @return ByteCode que se corresponde con el operador aritmético
	 */
	private ByteCode generateBCArithmeticOper(){
		if (this.operator.equals("+")) return new Add();
		else if (this.operator.equals("-")) return new Sub();
		else if (this.operator.equals("*")) return new Mul();
		else if (this.operator.equals("/")) return new Div();
		else return null;
	}
	/**
	 * Método que genera un String de la instrucción.
	 */
	public String toString(){
		String s = this.var_name + " = " + this.term1.toString() + ' ' + this.operator +
				' ' + this.term2.toString();
		return s;
	}
}
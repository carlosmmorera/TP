package TP.PR1.MV;

public class CPU {
	private Memory memoria;
	private OperandStack pila;
	private boolean end;
	
	public CPU(){
		this.memoria=new Memory();
		this.pila=new OperandStack();
		this.end=false;
	}
	public boolean execute(ByteCode instr){
		ENUM_BYTECODE inst = instr.getEnum();
		int valor = 0, op2 = 0;
		
		switch (inst){
		case PUSH: pila.pushop(instr.getParam()); return true;
		case LOAD: return this.load(instr.getParam());
		case STORE: if (pila.pop(valor)) return this.memoria.write(instr.getParam(), valor);
					else return false; 
		case ADD: 	if (pila.pop(op2) && pila.pop(valor)) {
							pila.pushop(valor + op2); return true;
					}
					else return false;
		case SUB: if (pila.pop(op2) && pila.pop(valor)) {
						pila.pushop(valor - op2); return true;
				}
				else return false;
		case MUL: if (pila.pop(op2) && pila.pop(valor)) {
						pila.pushop(valor * op2); return true;
				}	
				else return false;
		case DIV: if (pila.pop(op2) && pila.pop(valor)) {
					pila.pushop(valor/op2); return true;
					}
				else return false;
		}
		case OUT:
		case HALT: this.end = true; return true;
		default: return false;
	}
	public boolean load(int pos){
		Integer elem = this.memoria.read(pos);
		if (elem != null){
			this.pila.pushop(elem);
			return true;
		}
		else return false;
	}
}

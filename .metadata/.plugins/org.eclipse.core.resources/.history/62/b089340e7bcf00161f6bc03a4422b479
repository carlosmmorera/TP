package tp.pr3.ByteCode;

import tp.pr3.CPU.CPU;
/**
 * Clase que gestiona el ByteCode Load.
 * @author Carlos Moreno
 * @author Manuel Suárez
 * @version 30/12/2016
 */
public class Load implements ByteCode{
	private int n;
	/**
	 * Constructores de la clase.
	 */
	public Load(){
		this.n = 0;
	}
	public Load(int a){
		this.n = a;
	}
	/**
	 * Método que ejecuta el ByteCode Load.
	 * @param cpu: @see {@link tp.pr2.CPU.CPU}.
	 */
	public void execute(CPU cpu){
		cpu.load(this.n);
		cpu.aumentarCont();
	}
	/**
	 * Método que parsea la instruccion Load.
	 * @param s recibe la cadena de caracteres que representa el ByteCode introducido.
	 * @return ByteCode dependiendo si la cadena introducida por el
	 * usuario se corresponde con Load o no.
	 * 
	 * @throws NumberFormatException que se genera al intentar tratar de pasar
	 * a tipo entero un caracter no numérico.
	 */
	public ByteCode parse(String[] s) throws NumberFormatException{
		try{
			if (s.length == 2 && s[0].equalsIgnoreCase("LOAD"))
				return new Load(Integer.parseInt(s[1]));
			else return null;
		}
		catch(NumberFormatException e){
			System.out.println("Error al introducir el ByteCode LOAD");
			System.out.println("A 'LOAD' debe precederle un caracter numérico");
			return null;
		}
	}
	/**
	 * @return String con el nombre del BC.
	 */
	public String toString(){
		return "LOAD " + this.n;
	}
}

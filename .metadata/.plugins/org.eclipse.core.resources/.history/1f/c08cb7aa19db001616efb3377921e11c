package tp.pr3.ProgramCompiler.Instruction;

import tp.pr3.ByteCode.*;
import tp.pr3.Exception.*;
import tp.pr3.ProgramCompiler.LexicalParser;
import tp.pr3.ProgramCompiler.Term.*;
/**
 * Clase que implementa la instrucción SimpleAssignment.
 * @author Carlos Moreno
 * @author Manuel Suárez
 * @version 15/01/2017
 */
public class SimpleAssignment implements Instruction{
	private String var_name;
	private Term rhs;
	
	final int NUMCOMPONENTES = 3;
	/**
	 * Constructores de la clase.
	 */
	public SimpleAssignment(){
		this.var_name = "";
	}
	public SimpleAssignment(String varName, Term term){
		this.var_name = varName;
		this.rhs = term;
	}
	/**
	 * Método que parsea la instrucción.
	 * @param words: instrucción introducida en el programa.
	 * @param lexparser encargada del análisis léxico.
	 * @return Instruction dependiendo de si coincide con la instrucción de esta clase.
	 */
	public Instruction lexParse(String[] words, LexicalParser lexparser){
		if (words.length != NUMCOMPONENTES || words[1].length() != 1) return null;
		else{
			if (!words[1].equals("=")) return null;
			else {
				Term term = TermParser.parse(words[2]);
				if (term == null) return null;
				else{
					lexparser.increaseProgramCounter();
					return new SimpleAssignment(words[0], term);
				}
			}
		}
	}
	/**
	 * Método que compila la instrucción.
	 * @param @see {@link tp.pr3.ProgramCompiler.Compiler}.
	 * @throws ArrayException
	 * @throws VariableTableOverflow
	 */
	public void compile(tp.pr3.ProgramCompiler.Compiler compiler) 
			throws ArrayException, VariableTableOverflow{
		compiler.addByteCode(this.rhs.compile(compiler));
		int index = 0;
		try{
			index = compiler.getIndex(this.var_name);
		}
		catch(NonexistentVariable e){
			index = compiler.addVar(this.var_name);
		}
		finally{
			ByteCode bc = new Store(index);
			compiler.addByteCode(bc);
		}	
	}
}
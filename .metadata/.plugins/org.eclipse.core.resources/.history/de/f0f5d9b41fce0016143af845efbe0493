package tp.pr3.ProgramCompiler;

import tp.pr3.Exception.LexicalAnalysisException;
import tp.pr3.ProgramCompiler.Instruction.*;

public class LexicalParser {
	private SourceProgram sProgram;
	private int programCounter;
	
//	public LexicalParser(){
//		this.sProgram = new SourceProgram();
//		this.programCounter = 0;
//	}
//	public LexicalParser(SourceProgram srcPr){
//		this.sProgram = srcPr;
//		this.programCounter = 0;
//	}
//	public LexicalParser(SourceProgram srcPr, int n){
//		this.sProgram = srcPr;
//		this.programCounter = n;
//	}
	
	//TIENE QUE INCREMENTAR EL CONTADOR
	public void lexicalParser(ParsedProgram pProgram, String stopKey)
			throws LexicalAnalysisException{
		String instr = "";
		boolean stop = false;
		Instruction instruction = null;
		
		while (this.programCounter < this.sProgram.getNumeroInstrucciones()&& !stop){
			instr = sProgram.getInstructionAt(this.programCounter);
			
			if (instr.equalsIgnoreCase(stopKey))stop = true;
			else {
				try{
					instruction = ParserInstruction.parse(instr,this);
					//Añadir instruccion a pProgram
				}
				catch (LexicalAnalysisException e){
					System.out.println(e + "Error en la línea: " + this.programCounter);
					System.out.println("No se ha podido compilar el programa");
				}
			}
		}
		//algo después
	}
	public void increaseProgramCounter(){
		this.programCounter++;
	}
}

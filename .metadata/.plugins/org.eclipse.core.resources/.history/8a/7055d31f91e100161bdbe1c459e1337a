package tp.pr3.programcompiler.condition;

import tp.pr3.ByteCode.ConditionalJumps.*;
import tp.pr3.bytecode.conditionaljumps.ConditionalJumps;
import tp.pr3.bytecode.conditionaljumps.IfLeq;
import tp.pr3.programcompiler.LexicalParser;
import tp.pr3.programcompiler.term.Term;
/**
 * Método que implementa la condición menor o igual.
 * @author Carlos Moreno
 * @version 15/01/2017
 */
public class LessEq extends Condition{
	/**
	 * Constructores de la clase.
	 */
	public LessEq(){
		super();
	}
	public LessEq(Term t1, Term t2){
		super(t1,t2);
	}
	/**
	 * Método encargado de parsear esta condición.
	 * @param t1
	 * @param op
	 * @param t2
	 * @param parser
	 * @return Condition en función de si coincide con esta condición.
	 */
	public Condition parseAux(Term t1, String op, Term t2,
			LexicalParser parser){
		if (op.equals("<=")) return new LessEq(t1, t2);
		else return null;
	}
	/**
	 * Método que compila esta condición.
	 * @return ConditionalJumps de acuerdo con esta condición.
	 */
	public ConditionalJumps compileAux(){
		return new IfLeq();
	}
	/**
	 * Método que genera un String de la condición.
	 */
	public String toString(){
		String s = "<=";
		return s;
	}
}
